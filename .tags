!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABS	libsrcs/libft/includes/libft.h	/^# define ABS(/;"	d
BUFF_SIZE	libsrcs/libft/includes/libft.h	/^# define BUFF_SIZE /;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	libsrcs/ft_printf/Makefile	/^CC = gcc$/;"	m
CC	libsrcs/libft/Makefile	/^CC = gcc$/;"	m
CC	libsrcs/libftmatrices/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS =  -Wextra -Wall -g$/;"	m
CFLAGS	libsrcs/ft_printf/Makefile	/^CFLAGS = -Wall -Werror -Wextra -c$/;"	m
CFLAGS	libsrcs/libft/Makefile	/^CFLAGS = -Werror -Wall -Wextra -c -g$/;"	m
CFLAGS	libsrcs/libftmatrices/Makefile	/^CFLAGS = -Werror -Wall -Wextra -c -g$/;"	m
FONT_HEIGHT	libsrcs/minilibx/mlx_int.h	/^#define	FONT_HEIGHT	/;"	d
FONT_WIDTH	libsrcs/minilibx/mlx_int.h	/^#define FONT_WIDTH	/;"	d
FT_PRINTF_H	libsrcs/ft_printf/includes/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
INC	Makefile	/^INC = $(addprefix -I,$(INC_PATH))$/;"	m
INC	libsrcs/ft_printf/Makefile	/^INC = $(addprefix -I,$(INC_PATH))$/;"	m
INC	libsrcs/libft/Makefile	/^INC = $(addprefix -I,$(INC_PATH))$/;"	m
INC	libsrcs/libftmatrices/Makefile	/^INC = $(addprefix -I,$(INC_PATH))$/;"	m
INC_PATH	Makefile	/^INC_PATH = .\/includes .\/libsrcs\/libft\/includes\/ .\/libsrcs\/minilibx .\/libsrcs\/ft_printf\/includes .\/libsrcs\/libftmatrices\/includes$/;"	m
INC_PATH	libsrcs/ft_printf/Makefile	/^INC_PATH = .\/includes$/;"	m
INC_PATH	libsrcs/libft/Makefile	/^INC_PATH = .\/includes\/$/;"	m
INC_PATH	libsrcs/libftmatrices/Makefile	/^INC_PATH = .\/includes\/ ..\/libft\/includes$/;"	m
LFLAGS	Makefile	/^LFLAGS = -lft -framework OpenGL -framework AppKit -lm -lmlx -lftprintf -lftmatrices$/;"	m
LIB	libsrcs/libft/Makefile	/^LIB = $(addprefix -L,$(LIB_PATH))$/;"	m
LIB	libsrcs/libftmatrices/Makefile	/^LIB = $(addprefix -L,$(LIB_PATH))$/;"	m
LIBFT_H	libsrcs/libft/includes/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_MATRICES_H	libsrcs/includes/libftmatrices.h	/^# define LIBFT_MATRICES_H$/;"	d
LIBFT_MATRICES_H	libsrcs/libftmatrices/includes/libftmatrices.h	/^# define LIBFT_MATRICES_H$/;"	d
LIB_DIR	Makefile	/^LIB_DIR = .\/lib\/$/;"	m
LIB_PATH	libsrcs/libft/Makefile	/^LIB_PATH = .\/$/;"	m
LIB_PATH	libsrcs/libftmatrices/Makefile	/^LIB_PATH = .\/$/;"	m
MAX_EVENT	libsrcs/minilibx/mlx_int.h	/^#define	MAX_EVENT	/;"	d
MAX_PIXEL_NB	libsrcs/minilibx/mlx_int.h	/^#define MAX_PIXEL_NB	/;"	d
MLX_H	libsrcs/minilibx/mlx.h	/^#define	MLX_H$/;"	d
M_PI	libsrcs/includes/libftmatrices.h	/^#  define M_PI /;"	d
M_PI	libsrcs/libftmatrices/includes/libftmatrices.h	/^#  define M_PI /;"	d
NAME	Makefile	/^NAME = wolf3d$/;"	m
NAME	libsrcs/ft_printf/Makefile	/^NAME = ..\/..\/lib\/libftprintf.a$/;"	m
NAME	libsrcs/libft/Makefile	/^NAME = ..\/..\/lib\/libft.a$/;"	m
NAME	libsrcs/libftmatrices/Makefile	/^NAME = ..\/..\/lib\/libftmatrices.a$/;"	m
NOM	libsrcs/minilibx/Makefile	/^NOM=..\/..\/lib\/libmlx.a$/;"	m
OBJ	Makefile	/^OBJ = $(addprefix $(OBJ_PATH),$(OBJ_NAME))$/;"	m
OBJ	libsrcs/ft_printf/Makefile	/^OBJ = $(addprefix $(OBJ_PATH),$(OBJ_NAME))$/;"	m
OBJ	libsrcs/libft/Makefile	/^OBJ = $(addprefix $(OBJ_PATH),$(OBJ_NAME))$/;"	m
OBJ	libsrcs/libftmatrices/Makefile	/^OBJ = $(addprefix $(OBJ_PATH),$(OBJ_NAME))$/;"	m
OBJ	libsrcs/minilibx/Makefile	/^OBJ=$(OBJ1:.m=.o)$/;"	m
OBJ1	libsrcs/minilibx/Makefile	/^OBJ1=$(SRC:.c=.o)$/;"	m
OBJ_NAME	Makefile	/^OBJ_NAME = $(SRC_NAME:.c=.o)$/;"	m
OBJ_NAME	libsrcs/ft_printf/Makefile	/^OBJ_NAME = $(SRC_NAME:.c=.o)$/;"	m
OBJ_NAME	libsrcs/libft/Makefile	/^OBJ_NAME = $(SRC_NAME:.c=.o)$/;"	m
OBJ_NAME	libsrcs/libftmatrices/Makefile	/^OBJ_NAME = $(SRC_NAME:.c=.o)$/;"	m
OBJ_PATH	Makefile	/^OBJ_PATH = .\/obj\/$/;"	m
OBJ_PATH	libsrcs/ft_printf/Makefile	/^OBJ_PATH = .\/obj\/$/;"	m
OBJ_PATH	libsrcs/libft/Makefile	/^OBJ_PATH = .\/obj\/$/;"	m
OBJ_PATH	libsrcs/libftmatrices/Makefile	/^OBJ_PATH = .\/obj\/$/;"	m
RETURN	libsrcs/minilibx/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
SRC	Makefile	/^SRC = $(addprefix $(SRC_PATH),$(SRC_NAME))$/;"	m
SRC	libsrcs/ft_printf/Makefile	/^SRC = $(addprefix $(SRC_PATH),$(SRC_NAME))$/;"	m
SRC	libsrcs/libft/Makefile	/^SRC = $(addprefix $(SRC_PATH),$(SRC_NAME))$/;"	m
SRC	libsrcs/libftmatrices/Makefile	/^SRC = $(addprefix $(SRC_PATH),$(SRC_NAME))$/;"	m
SRC	libsrcs/minilibx/Makefile	/^SRC= mlx_shaders.c mlx_new_window.m mlx_init_loop.m mlx_new_image.m mlx_xpm.c mlx_int_str_to_wordtab.c$/;"	m
SRC_NAME	Makefile	/^SRC_NAME = main.c \\$/;"	m
SRC_NAME	libsrcs/ft_printf/Makefile	/^SRC_NAME = ft_printf.c \\$/;"	m
SRC_NAME	libsrcs/libft/Makefile	/^SRC_NAME = ft_atoi.c \\$/;"	m
SRC_NAME	libsrcs/libftmatrices/Makefile	/^SRC_NAME = ft_mat4x4_set_identity.c \\$/;"	m
SRC_PATH	Makefile	/^SRC_PATH = .\/srcs\/$/;"	m
SRC_PATH	libsrcs/ft_printf/Makefile	/^SRC_PATH = .\/srcss\/$/;"	m
SRC_PATH	libsrcs/libft/Makefile	/^SRC_PATH = .\/$/;"	m
SRC_PATH	libsrcs/libftmatrices/Makefile	/^SRC_PATH = .\/$/;"	m
UNIQ_BPP	libsrcs/minilibx/mlx_int.h	/^#define UNIQ_BPP	/;"	d
WIN_SIZE	includes/wolf3d.h	/^# define WIN_SIZE /;"	d
WOLF3D_H	includes/wolf3d.h	/^# define WOLF3D_H$/;"	d
actual_delta_dist	includes/wolf3d.h	/^	t_vec3		actual_delta_dist;$/;"	m	struct:s_data
actual_ray_dir	includes/wolf3d.h	/^	t_vec3		actual_ray_dir;$/;"	m	struct:s_data
actual_ray_pos	includes/wolf3d.h	/^	t_vec3		actual_ray_pos;$/;"	m	struct:s_data
actual_rotation_speed	includes/wolf3d.h	/^	double		actual_rotation_speed;$/;"	m	struct:s_data
actual_side_dist	includes/wolf3d.h	/^	t_vec3		actual_side_dist;$/;"	m	struct:s_data
actual_step	includes/wolf3d.h	/^	t_vec3		actual_step;$/;"	m	struct:s_data
addr	includes/wolf3d.h	/^	char		*addr;$/;"	m	struct:s_data
after_width	libsrcs/ft_printf/srcss/find_2.c	/^int		after_width(const char *str, int i)$/;"	f
allocate_map	srcs/parse.c	/^static int8_t	allocate_map(t_data *data)$/;"	f	file:
appid	libsrcs/minilibx/mlx_int.h	/^  void			*appid;$/;"	m	struct:mlx_ptr_s
av	includes/wolf3d.h	/^	const char	*av;$/;"	m	struct:s_data
bpp	includes/wolf3d.h	/^	int			bpp;$/;"	m	struct:s_data
buffer	libsrcs/minilibx/mlx_int.h	/^  char			*buffer;$/;"	m	struct:mlx_img_list_s
bytes_per_pixel	libsrcs/minilibx/font.c	/^  unsigned int 	 bytes_per_pixel; \/* 2:RGB16, 3:RGB, 4:RGBA *\/ $/;"	m	struct:__anon1	file:
cam_dir	includes/wolf3d.h	/^	t_vec3		cam_dir;	\/\/ -1 <=> 1  - Vers ou on est tourne$/;"	m	struct:s_data
cam_plane	includes/wolf3d.h	/^	t_vec3		cam_plane;	\/\/ J'ai pas trop compris a quoi ca sert.$/;"	m	struct:s_data
cam_pos	includes/wolf3d.h	/^	t_vec3		cam_pos;	\/\/ {0 <=> size_x, 0 <=> size_y}$/;"	m	struct:s_data
cam_square	includes/wolf3d.h	/^	t_vec3		cam_square; \/\/ (It is the position of the camera as a square in the map, instead of as a float position)$/;"	m	struct:s_data
clear_image	srcs/mlx_img_func.c	/^void	clear_image(t_data *data)$/;"	f
col	libsrcs/minilibx/mlx_xpm.c	/^  int           col;$/;"	m	struct:s_xpm_col	file:
collision_pos	includes/wolf3d.h	/^		t_vec3	collision_pos;$/;"	m	struct:s_hit_info
color	libsrcs/minilibx/mlx_xpm.c	/^  int   color;$/;"	m	struct:s_col_name	file:
compound_cross	libsrcs/libftmatrices/ft_vec3_cross.c	/^static void	compound_cross(t_vec3 dst, const t_vec3 v2)$/;"	f	file:
compound_mult	libsrcs/libftmatrices/ft_mat4x4_mult.c	/^static void	compound_mult(t_mat4x4 ret, const t_mat4x4 m2) \/\/ not : ret == m1$/;"	f	file:
compound_mult	libsrcs/libftmatrices/ft_mat4x4_mult_with_vec4.c	/^static void	compound_mult(const t_mat4x4 m1, t_vec4 rez) \/\/ Note:  vec == rez$/;"	f	file:
compte	libsrcs/ft_printf/srcss/ft_itoa_base_ll.c	/^static int		compte(unsigned long nbr, int base)$/;"	f	file:
compte	libsrcs/ft_printf/srcss/ft_itoa_base_ull.c	/^static int		compte(unsigned long long nbr, int base)$/;"	f	file:
compte	libsrcs/ft_printf/srcss/ft_itoa_ptr.c	/^static int		compte(unsigned long nbr)$/;"	f	file:
compte	libsrcs/libft/ft_itoa_base.c	/^static int	compte(unsigned long nbr, int base)$/;"	f	file:
compte	libsrcs/libft/ft_itoa_base_ll.c	/^static int		compte(unsigned long nbr, int base)$/;"	f	file:
compte	libsrcs/libft/ft_itoa_base_ull.c	/^static int	compte(unsigned long long nbr, int base)$/;"	f	file:
compte	libsrcs/libft/ft_itoa_ptr.c	/^static int		compte(unsigned long nbr)$/;"	f	file:
content	libsrcs/libft/includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content_size	libsrcs/libft/includes/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
conv	libsrcs/ft_printf/includes/ft_printf.h	/^	char		conv;$/;"	m	struct:s_arg
corrected_dist	includes/wolf3d.h	/^		double	corrected_dist;$/;"	m	struct:s_hit_info
debut	libsrcs/ft_printf/includes/ft_printf.h	/^	int			debut;$/;"	m	struct:s_arg
degrees_to_radians	libsrcs/includes/libftmatrices.h	/^#define degrees_to_radians(/;"	d
degrees_to_radians	libsrcs/libftmatrices/includes/libftmatrices.h	/^#define degrees_to_radians(/;"	d
display_log	libsrcs/minilibx/mlx_shaders.c	/^void display_log(GLuint object, void (*param_func)(), void (*getlog_func)())$/;"	f
do_mult	libsrcs/libftmatrices/ft_mat4x4_mult_with_vec4.c	/^static double	do_mult(const t_mat4x4 m1, const t_vec4 vec, int8_t i)$/;"	f	file:
draw_col	srcs/mlx_loop_hook.c	/^static void	draw_col(t_data *data, t_hit_info *hit)$/;"	f	file:
endian	includes/wolf3d.h	/^	int			endian;$/;"	m	struct:s_data
fd	libsrcs/libft/includes/libft.h	/^	int				fd;$/;"	m	struct:s_gnl
fill_image	srcs/mlx_img_func.c	/^void	fill_image(t_data *data, int color)$/;"	f
fill_with_zeros	libsrcs/ft_printf/srcss/handle_prec.c	/^static char	*fill_with_zeros(const t_arg arg, char *ret, char *tab)$/;"	f	file:
fin	libsrcs/ft_printf/includes/ft_printf.h	/^	int			fin;$/;"	m	struct:s_arg
find_fin	libsrcs/ft_printf/srcss/find.c	/^int		find_fin(const char *str, int i, t_arg *arg)$/;"	f
find_flag	libsrcs/ft_printf/srcss/find.c	/^int		find_flag(const char *str, int i, t_arg *arg)$/;"	f
find_lm	libsrcs/ft_printf/srcss/find.c	/^int		find_lm(const char *str, int i, t_arg *arg)$/;"	f
find_prec	libsrcs/ft_printf/srcss/find.c	/^int		find_prec(const char *str, int i, t_arg *arg)$/;"	f
find_things	libsrcs/ft_printf/srcss/ft_printf.c	/^static void	find_things(t_arg *arg, char *str, int i, va_list list)$/;"	f	file:
find_width	libsrcs/ft_printf/srcss/find.c	/^int		find_width(const char *str, int i, t_arg *arg, va_list list)$/;"	f
flag	libsrcs/ft_printf/includes/ft_printf.h	/^	char		*flag;$/;"	m	struct:s_arg
font	libsrcs/minilibx/mlx_int.h	/^  mlx_img_list_t	*font;$/;"	m	struct:mlx_ptr_s
font_atlas	libsrcs/minilibx/font.c	/^} font_atlas = {$/;"	v	typeref:struct:__anon1	file:
font_fshader	libsrcs/minilibx/mlx_int.h	/^  GLuint	font_fshader;$/;"	m	struct:glsl_info_s
font_program	libsrcs/minilibx/mlx_int.h	/^  GLuint	font_program;$/;"	m	struct:glsl_info_s
font_vshader	libsrcs/minilibx/mlx_int.h	/^  GLuint	font_vshader;$/;"	m	struct:glsl_info_s
free_dtab	srcs/utils.c	/^void	free_dtab(int8_t **dtab, int size)$/;"	f
free_mlx_and_exit	srcs/mlx_general_func.c	/^void	free_mlx_and_exit(t_data *data)$/;"	f
ft_alloc_str	libsrcs/ft_printf/srcss/ft_alloc_str.c	/^char	*ft_alloc_str(const char *str)$/;"	f
ft_alloc_str	libsrcs/libft/ft_alloc_str.c	/^char	*ft_alloc_str(const char *str)$/;"	f
ft_alloc_str_with_char	libsrcs/ft_printf/srcss/ft_alloc_str_with_char.c	/^char	*ft_alloc_str_with_char(int c)$/;"	f
ft_alloc_str_with_char	libsrcs/libft/ft_alloc_str_with_char.c	/^char	*ft_alloc_str_with_char(int c)$/;"	f
ft_atoi	libsrcs/ft_printf/srcss/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_atoi	libsrcs/libft/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_bzero	libsrcs/libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_exchange_minus	libsrcs/ft_printf/srcss/handle_width.c	/^static char	*ft_exchange_minus(char *ret, t_arg arg)$/;"	f	file:
ft_flat	libsrcs/ft_printf/srcss/ft_printf.c	/^static void	ft_flat(t_arg *arg)$/;"	f	file:
ft_fln	libsrcs/libft/ft_strsplit.c	/^static	char	**ft_fln(char const *s, char **res, size_t *x, char c)$/;"	f	file:
ft_go_on	libsrcs/libft/ft_go_on.c	/^void	*ft_go_on(void *str, int i)$/;"	f
ft_handle_with_p	libsrcs/ft_printf/srcss/handle_width.c	/^static char	*ft_handle_with_p(char *ret, char *tab, const t_arg arg)$/;"	f	file:
ft_increase	libsrcs/ft_printf/srcss/find_2.c	/^void	ft_increase(int *i, int *j)$/;"	f
ft_isalnum	libsrcs/libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libsrcs/libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libsrcs/libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libsrcs/ft_printf/srcss/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isdigit	libsrcs/libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libsrcs/libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa_base	libsrcs/libft/ft_itoa_base.c	/^char		*ft_itoa_base(unsigned int nbr, int base)$/;"	f
ft_itoa_base_ll	libsrcs/ft_printf/srcss/ft_itoa_base_ll.c	/^char			*ft_itoa_base_ll(long long nbr, int base)$/;"	f
ft_itoa_base_ll	libsrcs/libft/ft_itoa_base_ll.c	/^char			*ft_itoa_base_ll(long long nbr, int base)$/;"	f
ft_itoa_base_ull	libsrcs/ft_printf/srcss/ft_itoa_base_ull.c	/^char			*ft_itoa_base_ull(unsigned long long nbr, int base)$/;"	f
ft_itoa_base_ull	libsrcs/libft/ft_itoa_base_ull.c	/^char		*ft_itoa_base_ull(unsigned long long nbr, int base)$/;"	f
ft_itoa_ptr	libsrcs/ft_printf/srcss/ft_itoa_ptr.c	/^char			*ft_itoa_ptr(void *ptr)$/;"	f
ft_itoa_ptr	libsrcs/libft/ft_itoa_ptr.c	/^char			*ft_itoa_ptr(void *ptr)$/;"	f
ft_lstadd	libsrcs/libft/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstdel	libsrcs/libft/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdelone	libsrcs/libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdict	libsrcs/libft/get_next_line.c	/^static t_gnl	*ft_lstdict(t_gnl *lst, const int n)$/;"	f	file:
ft_lstiter	libsrcs/libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstmap	libsrcs/libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libsrcs/libft/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_mat4x4_copy	libsrcs/libftmatrices/ft_mat4x4_copy.c	/^void	ft_mat4x4_copy(t_mat4x4 dest, const t_mat4x4 src)$/;"	f
ft_mat4x4_mult	libsrcs/libftmatrices/ft_mat4x4_mult.c	/^void		ft_mat4x4_mult(t_mat4x4 ret, const t_mat4x4 m1, const t_mat4x4 m2)$/;"	f
ft_mat4x4_mult_with_real	libsrcs/libftmatrices/ft_mat4x4_mult_with_real.c	/^void	ft_mat4x4_mult_with_real(t_mat4x4 rez, const t_mat4x4 m, double r)$/;"	f
ft_mat4x4_mult_with_vec4	libsrcs/libftmatrices/ft_mat4x4_mult_with_vec4.c	/^void		ft_mat4x4_mult_with_vec4(t_vec4 rez, const t_mat4x4 m1, const t_vec4 vec)$/;"	f
ft_mat4x4_print	libsrcs/libftmatrices/ft_mat4x4_print.c	/^void	ft_mat4x4_print(const t_mat4x4 matrice)$/;"	f
ft_mat4x4_rotate	libsrcs/libftmatrices/ft_mat4x4_rotate.c	/^void	ft_mat4x4_rotate(t_mat4x4 matrice, double angle, const t_vec3 axis)$/;"	f
ft_mat4x4_rotate_from_double_array	libsrcs/libftmatrices/ft_mat4x4_rotate_from_double_array.c	/^void	ft_mat4x4_rotate_from_double_array(t_mat4x4 matrice, double angle, const double array[3])$/;"	f
ft_mat4x4_scale	libsrcs/libftmatrices/ft_mat4x4_scale.c	/^void	ft_mat4x4_scale(t_mat4x4 matrice, const t_vec3 scale)$/;"	f
ft_mat4x4_scale_from_double_array	libsrcs/libftmatrices/ft_mat4x4_scale_from_double_array.c	/^void	ft_mat4x4_scale_from_double_array(t_mat4x4 matrice, const double array[3])$/;"	f
ft_mat4x4_set_identity	libsrcs/libftmatrices/ft_mat4x4_set_identity.c	/^void	ft_mat4x4_set_identity(t_mat4x4 matrice)$/;"	f
ft_mat4x4_set_look_at	libsrcs/libftmatrices/ft_mat4x4_set_look_at.c	/^void	ft_mat4x4_set_look_at(t_mat4x4 matrice, const t_vec3 eye, const t_vec3 target, const t_vec3 up)$/;"	f
ft_mat4x4_set_look_at_from_double_array	libsrcs/libftmatrices/ft_mat4x4_set_look_at.c	/^void	ft_mat4x4_set_look_at_from_double_array(t_mat4x4 matrice, const double eye[3], const double target[3], const double up[3])$/;"	f
ft_mat4x4_set_projection	libsrcs/libftmatrices/ft_mat4x4_set_projection.c	/^void	ft_mat4x4_set_projection(t_mat4x4 m, const double array[4])$/;"	f
ft_mat4x4_set_rotation	libsrcs/libftmatrices/ft_mat4x4_set_rotation.c	/^void	ft_mat4x4_set_rotation(t_mat4x4 matrice, double angle, const t_vec3 axis)$/;"	f
ft_mat4x4_set_scale	libsrcs/libftmatrices/ft_mat4x4_set_scale.c	/^void	ft_mat4x4_set_scale(t_mat4x4 matrix, const t_vec3 scale)$/;"	f
ft_mat4x4_set_translation	libsrcs/libftmatrices/ft_mat4x4_set_translation.c	/^void	ft_mat4x4_set_translation(t_mat4x4 m, const t_vec4 v)$/;"	f
ft_mat4x4_set_zero	libsrcs/libftmatrices/ft_mat4x4_set_zero.c	/^void	ft_mat4x4_set_zero(t_mat4x4 m)$/;"	f
ft_mat4x4_to_float_array	libsrcs/libftmatrices/ft_mat4x4_to_float_array.c	/^void    ft_mat4x4_to_float_array(float dest[16], const t_mat4x4 matrice)$/;"	f
ft_mat4x4_translate	libsrcs/libftmatrices/ft_mat4x4_translate.c	/^void	ft_mat4x4_translate(t_mat4x4 m, const t_vec3 v)$/;"	f
ft_mat4x4_translate_from_double_array	libsrcs/libftmatrices/ft_mat4x4_translate_from_double_array.c	/^void	ft_mat4x4_translate_from_double_array(t_mat4x4 matrice, const double array[3])$/;"	f
ft_memalloc	libsrcs/libft/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libsrcs/libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst,$/;"	f
ft_memchr	libsrcs/libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libsrcs/libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libsrcs/libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memdel	libsrcs/libft/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memmove	libsrcs/libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t n)$/;"	f
ft_memset	libsrcs/libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_pow	libsrcs/libft/ft_putnbr.c	/^static	int		ft_pow(int nb, int pow)$/;"	f	file:
ft_pow	libsrcs/libft/ft_putnbr_fd.c	/^static	int		ft_pow(int nb, int pow)$/;"	f	file:
ft_pow	libsrcs/libft/ft_putunbr.c	/^static unsigned int	ft_pow(int nb, int pow)$/;"	f	file:
ft_print_fd	libsrcs/libft/ft_putnbr_fd.c	/^static	void	ft_print_fd(int taille, int c, int fd)$/;"	f	file:
ft_printf	libsrcs/ft_printf/srcss/ft_printf.c	/^int			ft_printf(const char *str, ...)$/;"	f
ft_printing	libsrcs/libft/ft_putnbr.c	/^static	void	ft_printing(int taille, int c)$/;"	f	file:
ft_printing	libsrcs/libft/ft_putunbr.c	/^static void			ft_printing(int taille, unsigned int c)$/;"	f	file:
ft_putchar	libsrcs/ft_printf/srcss/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar	libsrcs/libft/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libsrcs/libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libsrcs/libft/ft_putendl.c	/^void	ft_putendl(char *s)$/;"	f
ft_putendl_fd	libsrcs/libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr	libsrcs/libft/ft_putnbr.c	/^void			ft_putnbr(int c)$/;"	f
ft_putnbr_fd	libsrcs/libft/ft_putnbr_fd.c	/^void			ft_putnbr_fd(int c, int fd)$/;"	f
ft_putstr	libsrcs/ft_printf/srcss/ft_putstr.c	/^void	ft_putstr(char *s)$/;"	f
ft_putstr	libsrcs/libft/ft_putstr.c	/^void	ft_putstr(char *s)$/;"	f
ft_putstr_fd	libsrcs/libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_putunbr	libsrcs/libft/ft_putunbr.c	/^void				ft_putunbr(unsigned int c)$/;"	f
ft_seconde_partie	libsrcs/ft_printf/srcss/ft_handle_conv_3.c	/^static char	*ft_seconde_partie(int c, char *ret)$/;"	f	file:
ft_strcat	libsrcs/libft/ft_strcat.c	/^char	*ft_strcat(char *s1, const char *s2)$/;"	f
ft_strchr	libsrcs/ft_printf/srcss/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchr	libsrcs/libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	libsrcs/libft/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libsrcs/libft/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcmp	libsrcs/libft/ft_strrevcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcount	libsrcs/libft/ft_strsplit.c	/^static	int		ft_strcount(char const *s, char const c)$/;"	f	file:
ft_strcpy	libsrcs/ft_printf/srcss/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strcpy	libsrcs/libft/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdel	libsrcs/libft/ft_strdel.c	/^void	ft_strdel(char **ap)$/;"	f
ft_strdup	libsrcs/ft_printf/srcss/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdup	libsrcs/libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strequ	libsrcs/ft_printf/srcss/ft_strequ.c	/^int		ft_strequ(char const *s1, char const *s2)$/;"	f
ft_strequ	libsrcs/libft/ft_strequ.c	/^int		ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	libsrcs/libft/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/;"	f
ft_striteri	libsrcs/libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libsrcs/libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoinaf1	libsrcs/ft_printf/srcss/ft_strjoinaf1.c	/^char	*ft_strjoinaf1(char *s1, const char *s2)$/;"	f
ft_strjoinaf1	libsrcs/libft/ft_strjoinaf1.c	/^char	*ft_strjoinaf1(char *s1, char const *s2)$/;"	f
ft_strjoinaf12	libsrcs/ft_printf/srcss/ft_strjoinaf12.c	/^char	*ft_strjoinaf12(char *s1, char *s2)$/;"	f
ft_strjoinaf12	libsrcs/libft/ft_strjoinaf12.c	/^char	*ft_strjoinaf12(char *s1, char *s2)$/;"	f
ft_strjoinaf2	libsrcs/ft_printf/srcss/ft_strjoinaf2.c	/^char	*ft_strjoinaf2(char const *s1, char *s2)$/;"	f
ft_strjoinaf2	libsrcs/libft/ft_strjoinaf2.c	/^char	*ft_strjoinaf2(char const *s1, char *s2)$/;"	f
ft_strlcat	libsrcs/libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libsrcs/ft_printf/srcss/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlen	libsrcs/libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmap	libsrcs/libft/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libsrcs/libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	libsrcs/libft/ft_strncat.c	/^char	*ft_strncat(char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	libsrcs/libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libsrcs/libft/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t n)$/;"	f
ft_strnequ	libsrcs/libft/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libsrcs/libft/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnstr	libsrcs/libft/ft_strnstr.c	/^char	*ft_strnstr(const char *s1, const char *s2, size_t n)$/;"	f
ft_strrchr	libsrcs/libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strsplit	libsrcs/libft/ft_strsplit.c	/^char			**ft_strsplit(char const *s, char c)$/;"	f
ft_strstr	libsrcs/libft/ft_strstr.c	/^char	*ft_strstr(const char *s1, const char *s2)$/;"	f
ft_strsub	libsrcs/ft_printf/srcss/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strsub	libsrcs/libft/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtoupper	libsrcs/ft_printf/srcss/ft_strtoupper.c	/^char	*ft_strtoupper(char *str)$/;"	f
ft_strtoupper	libsrcs/libft/ft_strtoupper.c	/^char	*ft_strtoupper(char *str)$/;"	f
ft_strtrim	libsrcs/libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s)$/;"	f
ft_tolower	libsrcs/libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libsrcs/ft_printf/srcss/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_toupper	libsrcs/libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_vec3_add	libsrcs/libftmatrices/ft_vec3_add.c	/^void		ft_vec3_add(t_vec3 dst, const t_vec3 v1, const t_vec3 v2)$/;"	f
ft_vec3_copy	libsrcs/libftmatrices/ft_vec3_copy.c	/^void	ft_vec3_copy(t_vec3 dst, const t_vec3 src)$/;"	f
ft_vec3_cross	libsrcs/libftmatrices/ft_vec3_cross.c	/^void		ft_vec3_cross(t_vec3 dst, const t_vec3 v1, const t_vec3 v2)$/;"	f
ft_vec3_dot	libsrcs/libftmatrices/ft_vec3_dot.c	/^double	ft_vec3_dot(const t_vec3 u, const t_vec3 v)$/;"	f
ft_vec3_get_magnitude	libsrcs/libftmatrices/ft_vec3_get_magnitude.c	/^double	ft_vec3_get_magnitude(const t_vec3 vector)$/;"	f
ft_vec3_init	libsrcs/libftmatrices/ft_vec3_init.c	/^void	ft_vec3_init(t_vec3 vec, const double tab[3])$/;"	f
ft_vec3_normalize	libsrcs/libftmatrices/ft_vec3_normalize.c	/^void	ft_vec3_normalize(t_vec3 vector)$/;"	f
ft_vec3_print	libsrcs/libftmatrices/ft_vec3_print.c	/^void	ft_vec3_print(const t_vec3 v)$/;"	f
ft_vec3_sub	libsrcs/libftmatrices/ft_vec3_sub.c	/^void	ft_vec3_sub(t_vec3 dst, const t_vec3 v1, const t_vec3 v2)$/;"	f
ft_vec4_init	libsrcs/libftmatrices/ft_vec4_init.c	/^void	ft_vec4_init(t_vec4 vec, const double tab[4])$/;"	f
ft_vec4_print	libsrcs/libftmatrices/ft_vec4_print.c	/^void	ft_vec4_print(const t_vec4 v)$/;"	f
ft_wchart_to_char	libsrcs/ft_printf/srcss/ft_handle_conv_3.c	/^char		*ft_wchart_to_char(wchar_t c)$/;"	f
ft_wchart_to_str	libsrcs/ft_printf/srcss/ft_handle_conv_3.c	/^char		*ft_wchart_to_str(wchar_t *ws)$/;"	f
ft_with_h	libsrcs/ft_printf/srcss/ft_handle_conv.c	/^static char	*ft_with_h(const t_arg arg, va_list list)$/;"	f	file:
ft_with_hh	libsrcs/ft_printf/srcss/ft_handle_conv.c	/^static char	*ft_with_hh(const t_arg arg, va_list list)$/;"	f	file:
ft_with_l	libsrcs/ft_printf/srcss/ft_handle_conv.c	/^static char	*ft_with_l(const t_arg arg, va_list list)$/;"	f	file:
ft_with_ll	libsrcs/ft_printf/srcss/ft_handle_conv.c	/^static char	*ft_with_ll(const t_arg arg, va_list list)$/;"	f	file:
ft_with_no_lm	libsrcs/ft_printf/srcss/ft_handle_conv_2.c	/^char		*ft_with_no_lm(const t_arg arg, va_list list)$/;"	f
ft_with_no_lm_2	libsrcs/ft_printf/srcss/ft_handle_conv_2.c	/^static char	*ft_with_no_lm_2(const t_arg arg, va_list list)$/;"	f	file:
ft_with_no_lm_3	libsrcs/ft_printf/srcss/ft_handle_conv_2.c	/^static char	*ft_with_no_lm_3(const t_arg arg, va_list list)$/;"	f	file:
ft_with_z	libsrcs/ft_printf/srcss/ft_handle_conv_3.c	/^char		*ft_with_z(const t_arg arg, va_list list)$/;"	f
ft_wstrlen	libsrcs/libft/ft_wstrlen.c	/^size_t	ft_wstrlen(const char *s)$/;"	f
func_t	libsrcs/minilibx/mlx_int.h	/^typedef int (*func_t)();$/;"	t
get_color_code	srcs/mlx_img_func.c	/^int		get_color_code(int r, int v, int b)$/;"	f
get_hit	srcs/mlx_loop_hook.c	/^static void	get_hit(t_data *data, t_vec3 ray_pos, t_vec3 ray_dir, t_hit_info *ret)$/;"	f	file:
get_next_line	libsrcs/libft/get_next_line.c	/^int				get_next_line(const int fd, char **line)$/;"	f
get_ray	srcs/mlx_loop_hook.c	/^static void	get_ray(t_data *data, t_vec3 ray_pos, t_vec3 ray_dir, double x)$/;"	f	file:
get_res_at	libsrcs/libftmatrices/ft_mat4x4_mult.c	/^static double	get_res_at(const t_mat4x4 a, const t_mat4x4 b, int8_t i, int8_t j)$/;"	f	file:
get_size_x	srcs/parse.c	/^static int8_t	get_size_x(t_data *data, char *str)$/;"	f	file:
get_size_y	srcs/parse.c	/^static int		get_size_y(const char *file)$/;"	f	file:
global_rotation_speed	includes/wolf3d.h	/^	double		global_rotation_speed;$/;"	m	struct:s_data
glsl_info_s	libsrcs/minilibx/mlx_int.h	/^typedef struct	glsl_info_s$/;"	s
glsl_info_t	libsrcs/minilibx/mlx_int.h	/^} glsl_info_t;$/;"	t	typeref:struct:glsl_info_s
gnl_add_elem	libsrcs/libft/get_next_line.c	/^static t_gnl	*gnl_add_elem(t_gnl **list, const int fd)$/;"	f	file:
going_back	includes/wolf3d.h	/^	int8_t		going_back;$/;"	m	struct:s_data
going_front	includes/wolf3d.h	/^	int8_t		going_front;$/;"	m	struct:s_data
going_left	includes/wolf3d.h	/^	int8_t		going_left;$/;"	m	struct:s_data
going_right	includes/wolf3d.h	/^	int8_t		going_right;$/;"	m	struct:s_data
h	includes/wolf3d.h	/^	double		h;			\/\/ En pixel$/;"	m	struct:s_data
handle_arg	libsrcs/ft_printf/srcss/ft_printf.c	/^static int	handle_arg(const char *str, int i, va_list list, int *o)$/;"	f	file:
handle_error_void	srcs/utils.c	/^int		handle_error_void(void *variable, void *error_value, char *msg)$/;"	f
handle_flag	libsrcs/ft_printf/srcss/handle_flag.c	/^char	*handle_flag(t_arg *arg, char *ret)$/;"	f
handle_flag_2	libsrcs/ft_printf/srcss/handle_flag.c	/^char	*handle_flag_2(t_arg *arg, char *ret)$/;"	f
handle_prec	libsrcs/ft_printf/srcss/handle_prec.c	/^char		*handle_prec(const t_arg arg, char *ret)$/;"	f
handle_width	libsrcs/ft_printf/srcss/handle_width.c	/^char		*handle_width(const t_arg arg, char *ret, int *n)$/;"	f
height	libsrcs/minilibx/font.c	/^  unsigned int 	 height;$/;"	m	struct:__anon1	file:
height	libsrcs/minilibx/mlx_int.h	/^  int			height;$/;"	m	struct:mlx_img_list_s
image_fshader	libsrcs/minilibx/mlx_int.h	/^  GLuint	image_fshader;$/;"	m	struct:glsl_info_s
image_program	libsrcs/minilibx/mlx_int.h	/^  GLuint	image_program;$/;"	m	struct:glsl_info_s
image_vshader	libsrcs/minilibx/mlx_int.h	/^  GLuint	image_vshader;$/;"	m	struct:glsl_info_s
img	includes/wolf3d.h	/^	void		*img;$/;"	m	struct:s_data
img	libsrcs/minilibx/mlx_int.h	/^  mlx_img_list_t	*img;$/;"	m	struct:mlx_img_ctx_s
img_list	libsrcs/minilibx/mlx_int.h	/^  mlx_img_ctx_t		*img_list;$/;"	m	struct:mlx_win_list_s
img_list	libsrcs/minilibx/mlx_int.h	/^  mlx_img_list_t	*img_list;$/;"	m	struct:mlx_ptr_s
init_ret	libsrcs/ft_printf/srcss/ft_handle_conv.c	/^char		*init_ret(const t_arg arg, va_list list)$/;"	f
init_step_and_side_dist	srcs/mlx_loop_hook.c	/^static void	init_step_and_side_dist(t_data *data, t_vec3 step, t_vec3 side_dist)$/;"	f	file:
init_tab	libsrcs/ft_printf/srcss/handle_width.c	/^static char	*init_tab(int nb, char c)$/;"	f	file:
init_the_mlx	srcs/mlx_general_func.c	/^int		init_the_mlx(t_data *data)$/;"	f
init_things	libsrcs/ft_printf/srcss/ft_printf.c	/^static char	*init_things(t_arg *arg, char *ret, int *nbr)$/;"	f	file:
init_zero_tab	libsrcs/ft_printf/srcss/handle_prec.c	/^static char	*init_zero_tab(int nb)$/;"	f	file:
is_conv	libsrcs/ft_printf/srcss/is_x.c	/^int		is_conv(const char c)$/;"	f
is_flag	libsrcs/ft_printf/srcss/is_x.c	/^int		is_flag(const char c)$/;"	f
is_lm	libsrcs/ft_printf/srcss/is_x.c	/^int		is_lm(const char c)$/;"	f
key_press_hook	srcs/mlx_key_hook.c	/^int	key_press_hook(int keycode, void *data_void)$/;"	f
key_release_hook	srcs/mlx_key_hook.c	/^int	key_release_hook(int keycode, void *data_void)$/;"	f
line	libsrcs/libft/includes/libft.h	/^	char			*line;$/;"	m	struct:s_gnl
lm	libsrcs/ft_printf/includes/ft_printf.h	/^	char		lm[3];$/;"	m	struct:s_arg
loc_font_atlassize	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_font_atlassize;$/;"	m	struct:glsl_info_s
loc_font_color	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_font_color;$/;"	m	struct:glsl_info_s
loc_font_posinatlas	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_font_posinatlas;$/;"	m	struct:glsl_info_s
loc_font_posinwin	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_font_posinwin;$/;"	m	struct:glsl_info_s
loc_font_position	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_font_position;$/;"	m	struct:glsl_info_s
loc_font_texture	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_font_texture;$/;"	m	struct:glsl_info_s
loc_font_winhalfsize	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_font_winhalfsize;$/;"	m	struct:glsl_info_s
loc_image_pos	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_image_pos;$/;"	m	struct:glsl_info_s
loc_image_position	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_image_position;$/;"	m	struct:glsl_info_s
loc_image_size	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_image_size;$/;"	m	struct:glsl_info_s
loc_image_texture	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_image_texture;$/;"	m	struct:glsl_info_s
loc_image_winhalfsize	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_image_winhalfsize;$/;"	m	struct:glsl_info_s
loc_pixel_position	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_pixel_position;$/;"	m	struct:glsl_info_s
loc_pixel_texture	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_pixel_texture;$/;"	m	struct:glsl_info_s
loc_pixel_winhalfsize	libsrcs/minilibx/mlx_int.h	/^  GLint		loc_pixel_winhalfsize;$/;"	m	struct:glsl_info_s
loop_hook	libsrcs/minilibx/mlx_int.h	/^  void			(*loop_hook)(void *);$/;"	m	struct:mlx_ptr_s
loop_hook	srcs/mlx_loop_hook.c	/^int	loop_hook(void *data_void)$/;"	f
loop_hook_data	libsrcs/minilibx/mlx_int.h	/^  void			*loop_hook_data;$/;"	m	struct:mlx_ptr_s
loop_timer	libsrcs/minilibx/mlx_int.h	/^  void			*loop_timer;$/;"	m	struct:mlx_ptr_s
main	srcs/main.c	/^int main(int ac, char **av)$/;"	f
main_loop_active	libsrcs/minilibx/mlx_int.h	/^  int			main_loop_active;$/;"	m	struct:mlx_ptr_s
mallocp	libsrcs/libft/mallocp.c	/^void					*mallocp(size_t size)$/;"	f
map	includes/wolf3d.h	/^	int8_t		**map;$/;"	m	struct:s_data
mlx	includes/wolf3d.h	/^	void		*mlx;$/;"	m	struct:s_data
mlx_col_name	libsrcs/minilibx/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_img_ctx_s	libsrcs/minilibx/mlx_int.h	/^typedef struct	mlx_img_ctx_s$/;"	s
mlx_img_ctx_t	libsrcs/minilibx/mlx_int.h	/^} mlx_img_ctx_t;$/;"	t	typeref:struct:mlx_img_ctx_s
mlx_img_list_s	libsrcs/minilibx/mlx_int.h	/^typedef struct	mlx_img_list_s$/;"	s
mlx_img_list_t	libsrcs/minilibx/mlx_int.h	/^} mlx_img_list_t;$/;"	t	typeref:struct:mlx_img_list_s
mlx_int_file_get_rid_comment	libsrcs/minilibx/mlx_xpm.c	/^void	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_get_col_name	libsrcs/minilibx/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_line	libsrcs/minilibx/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	libsrcs/minilibx/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_parse_xpm	libsrcs/minilibx/mlx_xpm.c	/^void	*mlx_int_parse_xpm(mlx_ptr_t *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_static_line	libsrcs/minilibx/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	libsrcs/minilibx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	libsrcs/minilibx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	libsrcs/minilibx/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_xpm_set_pixel	libsrcs/minilibx/mlx_xpm.c	/^void	mlx_int_xpm_set_pixel(mlx_img_list_t *img, char *data, int opp, int col, int x)$/;"	f
mlx_ptr_s	libsrcs/minilibx/mlx_int.h	/^typedef struct		mlx_ptr_s$/;"	s
mlx_ptr_t	libsrcs/minilibx/mlx_int.h	/^} mlx_ptr_t;$/;"	t	typeref:struct:mlx_ptr_s
mlx_shaders	libsrcs/minilibx/mlx_shaders.c	/^int mlx_shaders(glsl_info_t *glsl)$/;"	f
mlx_shaders_font	libsrcs/minilibx/mlx_shaders.c	/^int mlx_shaders_font(glsl_info_t *glsl)$/;"	f
mlx_shaders_image	libsrcs/minilibx/mlx_shaders.c	/^int mlx_shaders_image(glsl_info_t *glsl)$/;"	f
mlx_shaders_pixel	libsrcs/minilibx/mlx_shaders.c	/^int mlx_shaders_pixel(glsl_info_t *glsl)$/;"	f
mlx_win_list_s	libsrcs/minilibx/mlx_int.h	/^typedef struct	mlx_win_list_s$/;"	s
mlx_win_list_t	libsrcs/minilibx/mlx_int.h	/^} mlx_win_list_t;$/;"	t	typeref:struct:mlx_win_list_s
mlx_xpm_file_to_image	libsrcs/minilibx/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(mlx_ptr_t *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	libsrcs/minilibx/mlx_xpm.c	/^void	*mlx_xpm_to_image(mlx_ptr_t *xvar,char **xpm_data,int *width,int *height)$/;"	f
must_refresh	includes/wolf3d.h	/^	int8_t		must_refresh;$/;"	m	struct:s_data
name	libsrcs/minilibx/mlx_xpm.c	/^  char  *name;$/;"	m	struct:s_col_name	file:
name	libsrcs/minilibx/mlx_xpm.c	/^  int           name;$/;"	m	struct:s_xpm_col	file:
nb_flush	libsrcs/minilibx/mlx_int.h	/^  int			nb_flush;$/;"	m	struct:mlx_win_list_s
newline_detected	libsrcs/libft/get_next_line.c	/^static int		newline_detected(char *stbuff, char **line,$/;"	f	file:
next	libsrcs/libft/includes/libft.h	/^	struct s_gnl	*next;$/;"	m	struct:s_gnl	typeref:struct:s_gnl::s_gnl
next	libsrcs/libft/includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	libsrcs/minilibx/mlx_int.h	/^  struct mlx_img_ctx_s	*next;$/;"	m	struct:mlx_img_ctx_s	typeref:struct:mlx_img_ctx_s::mlx_img_ctx_s
next	libsrcs/minilibx/mlx_int.h	/^  struct mlx_img_list_s	*next;$/;"	m	struct:mlx_img_list_s	typeref:struct:mlx_img_list_s::mlx_img_list_s
next	libsrcs/minilibx/mlx_int.h	/^  struct mlx_win_list_s	*next;$/;"	m	struct:mlx_win_list_s	typeref:struct:mlx_win_list_s::mlx_win_list_s
parse	srcs/parse.c	/^int8_t			parse(t_data *data, const char *file)$/;"	f
parse_line	srcs/parse.c	/^static int8_t	parse_line(t_data *data, int line_number, char *str)$/;"	f	file:
pixel_data	libsrcs/minilibx/font.c	/^  unsigned char	 pixel_data[1140 * 20 * 4 + 1];$/;"	m	struct:__anon1	file:
pixel_fshader	libsrcs/minilibx/mlx_int.h	/^  GLuint	pixel_fshader;$/;"	m	struct:glsl_info_s
pixel_program	libsrcs/minilibx/mlx_int.h	/^  GLuint	pixel_program;$/;"	m	struct:glsl_info_s
pixel_vshader	libsrcs/minilibx/mlx_int.h	/^  GLuint	pixel_vshader;$/;"	m	struct:glsl_info_s
pixmgt	libsrcs/minilibx/mlx_int.h	/^  int			pixmgt;$/;"	m	struct:mlx_win_list_s
poulet	libsrcs/libft/ft_strsplit.c	/^static	int		poulet(size_t i, size_t j, char const *s, char c)$/;"	f	file:
prec	libsrcs/ft_printf/includes/ft_printf.h	/^	int			prec;$/;"	m	struct:s_arg
prec_with_num	libsrcs/ft_printf/srcss/handle_prec.c	/^static char	*prec_with_num(const t_arg arg, char *ret, char *tab, char *tmp)$/;"	f	file:
prec_with_p	libsrcs/ft_printf/srcss/handle_prec.c	/^static char	*prec_with_p(const t_arg arg, char *ret)$/;"	f	file:
print_map	srcs/debug.c	/^void	print_map(t_data *data)$/;"	f
put_pixel_to_image	srcs/mlx_img_func.c	/^void	put_pixel_to_image(t_data *data, int color, int x, int y)$/;"	f
radians_to_degrees	libsrcs/includes/libftmatrices.h	/^#define radians_to_degrees(/;"	d
radians_to_degrees	libsrcs/libftmatrices/includes/libftmatrices.h	/^#define radians_to_degrees(/;"	d
red_cross_hook	srcs/misc_hooks.c	/^int	red_cross_hook(void *data_void)$/;"	f
refresh_player	srcs/mlx_loop_hook.c	/^static void	refresh_player(t_data *data)$/;"	f	file:
render	srcs/mlx_loop_hook.c	/^static void	render(t_data *data)$/;"	f	file:
ret_is_zero	libsrcs/ft_printf/srcss/handle_width.c	/^static char	*ret_is_zero(char *ret, int *n, int nb, const t_arg arg)$/;"	f	file:
return_close_free	srcs/parse.c	/^static int8_t	return_close_free(char *str, int fd, int ret)$/;"	f	file:
rotating	includes/wolf3d.h	/^	int8_t		rotating;$/;"	m	struct:s_data
s_arg	libsrcs/ft_printf/includes/ft_printf.h	/^typedef struct	s_arg {$/;"	s
s_col_name	libsrcs/minilibx/mlx_xpm.c	/^struct  s_col_name$/;"	s	file:
s_data	includes/wolf3d.h	/^typedef struct	s_data {$/;"	s
s_gnl	libsrcs/libft/includes/libft.h	/^typedef	struct		s_gnl$/;"	s
s_hit_info	includes/wolf3d.h	/^typedef struct	s_hit_info {$/;"	s
s_list	libsrcs/libft/includes/libft.h	/^typedef	struct		s_list$/;"	s
s_xpm_col	libsrcs/minilibx/mlx_xpm.c	/^typedef struct  s_xpm_col$/;"	s	file:
side	includes/wolf3d.h	/^		int8_t	side;$/;"	m	struct:s_hit_info
size_line	includes/wolf3d.h	/^	int			size_line;$/;"	m	struct:s_data
size_x	includes/wolf3d.h	/^	int			size_x;$/;"	m	struct:s_data
size_y	includes/wolf3d.h	/^	int			size_y;$/;"	m	struct:s_data
str_to_print	libsrcs/ft_printf/includes/ft_printf.h	/^	char		*str_to_print;$/;"	m	struct:s_arg
strjoin_secure	libsrcs/libft/get_next_line.c	/^static char		*strjoin_secure(char *s1, char *s2)$/;"	f	file:
sync_map_squares	srcs/utils.c	/^void	sync_map_squares(t_data *data)$/;"	f
t_arg	libsrcs/ft_printf/includes/ft_printf.h	/^}				t_arg;$/;"	t	typeref:struct:s_arg
t_data	includes/wolf3d.h	/^}				t_data;$/;"	t	typeref:struct:s_data
t_gnl	libsrcs/libft/includes/libft.h	/^}					t_gnl;$/;"	t	typeref:struct:s_gnl
t_hit_info	includes/wolf3d.h	/^}				t_hit_info;$/;"	t	typeref:struct:s_hit_info
t_list	libsrcs/libft/includes/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_mat4x4	libsrcs/includes/libftmatrices.h	/^typedef	double t_mat4x4[4][4]; \/\/ mat4x4[line][column]$/;"	t
t_mat4x4	libsrcs/libftmatrices/includes/libftmatrices.h	/^typedef	double t_mat4x4[4][4]; \/\/ mat4x4[line][column]$/;"	t
t_vec3	libsrcs/includes/libftmatrices.h	/^typedef double	t_vec3[3];$/;"	t
t_vec3	libsrcs/libftmatrices/includes/libftmatrices.h	/^typedef double	t_vec3[3];$/;"	t
t_vec4	libsrcs/includes/libftmatrices.h	/^typedef double	t_vec4[4];$/;"	t
t_vec4	libsrcs/libftmatrices/includes/libftmatrices.h	/^typedef double	t_vec4[4];$/;"	t
t_xpm_col	libsrcs/minilibx/mlx_xpm.c	/^} t_xpm_col;$/;"	t	typeref:struct:s_xpm_col	file:
texture	libsrcs/minilibx/mlx_int.h	/^  GLuint		texture;$/;"	m	struct:mlx_img_ctx_s
validate_line	srcs/parse.c	/^static int8_t	validate_line(char *str, int size_x)$/;"	f	file:
vbuffer	libsrcs/minilibx/mlx_int.h	/^  GLuint		vbuffer;$/;"	m	struct:mlx_img_ctx_s
vertexes	libsrcs/minilibx/mlx_int.h	/^  GLfloat		vertexes[8];$/;"	m	struct:mlx_img_list_s
w	includes/wolf3d.h	/^	double		w;			\/\/ En pixel$/;"	m	struct:s_data
width	libsrcs/ft_printf/includes/ft_printf.h	/^	int			width;$/;"	m	struct:s_arg
width	libsrcs/minilibx/font.c	/^  unsigned int 	 width;$/;"	m	struct:__anon1	file:
width	libsrcs/minilibx/mlx_int.h	/^  int			width;$/;"	m	struct:mlx_img_list_s
win	includes/wolf3d.h	/^	void		*win;$/;"	m	struct:s_data
win_list	libsrcs/minilibx/mlx_int.h	/^  mlx_win_list_t	*win_list;$/;"	m	struct:mlx_ptr_s
winid	libsrcs/minilibx/mlx_int.h	/^  void			*winid;$/;"	m	struct:mlx_win_list_s
